{"version":3,"sources":["serviceWorker.js","Components/Navbar.js","index.js"],"names":["Boolean","window","location","hostname","match","Navbar","className","href","type","data-toggle","data-target","id","aria-haspopup","aria-expanded","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iBCyBSC,MAzCd,WACG,OACI,yBAAKC,UAAa,0DACjB,yBAAKA,UAAa,mBAEhB,uBAAGA,UAAa,eAAeC,KAAK,KAApC,cAEC,4BAAQD,UAAa,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAa,qBACtF,0BAAMJ,UAAW,yBAEnB,yBAAKA,UAAW,2BAA2BK,GAAG,oBAC5C,wBAAIL,UAAW,sBACb,wBAAIA,UAAW,qBACb,uBAAGA,UAAW,2BAA2BC,KAAK,IAAII,GAAG,yBAAyBF,cAAY,WAAWG,gBAAc,OAAOC,gBAAc,SAAxI,SAGA,yBAAKP,UAAW,iBACd,uBAAGA,UAAW,gBAAgBC,KAAK,KAAnC,eACA,uBAAGD,UAAW,gBAAgBC,KAAK,KAAnC,YACA,uBAAGD,UAAW,gBAAgBC,KAAK,KAAnC,YAGJ,wBAAID,UAAW,YACb,uBAAGA,UAAW,WAAWC,KAAK,KAA9B,YAEF,wBAAID,UAAW,YACb,uBAAGA,UAAW,WAAWC,KAAK,KAA9B,YAEF,wBAAID,UAAW,YACb,uBAAGA,UAAW,WAAWC,KAAK,KAA9B,aAEF,wBAAID,UAAW,YACb,uBAAGA,UAAW,WAAWC,KAAK,KAA9B,eCxBlBO,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SFyH9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.33f2cda1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\n\r\n function Navbar() {\r\n    return (\r\n        <nav className  = \"navbar navbar-expand-md navbar-dark bg-dark sticky-top\">\r\n         <div className  = \"container-fluid\">\r\n           \r\n           <a className  = \"navbar-brand\" href=\"#\">LoLFantasy</a>\r\n           \r\n            <button className  = \"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target= \"#navbarResponsive\">\r\n              <span className =\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className =\"collapse navbar-collapse\" id=\"navbarResponsive\">\r\n              <ul className =\"navbar-nav ml-auto\">\r\n                <li className =\"nav-item dropdown\">\r\n                  <a className =\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                    Teams\r\n                  </a>\r\n                  <div className =\"dropdown-menu\">\r\n                    <a className =\"dropdown-item\" href=\"#\">Team Liquid</a>\r\n                    <a className =\"dropdown-item\" href=\"#\">Dignitas</a>\r\n                    <a className =\"dropdown-item\" href=\"#\">Cloud9</a>\r\n                  </div>\r\n                </li>\r\n                <li className =\"nav-item\">\r\n                  <a className =\"nav-link\" href=\"#\">Players</a>\r\n                </li>\r\n                <li className =\"nav-item\">\r\n                  <a className =\"nav-link\" href=\"#\">My Team</a>\r\n                </li>\r\n                <li className =\"nav-item\">\r\n                  <a className =\"nav-link\" href=\"#\">Schedule</a>\r\n                </li>\r\n                <li className =\"nav-item\">\r\n                  <a className =\"nav-link\" href=\"#\">Draft</a>\r\n                </li>\r\n              </ul>\r\n         </div>\r\n       </div>\r\n       </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport $ from 'jquery';\nimport Popper from 'popper.js'\nimport Navbar from \"./Components/Navbar\";\n\nReactDOM.render(<Navbar />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}